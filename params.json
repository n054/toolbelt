{"name":"Toolbelt","tagline":"Gemnasium toolbelt is a CLI for the Gemnasium API.","body":"# Gemnasium Toolbelt\r\n\r\n[![Build Status](https://travis-ci.org/gemnasium/toolbelt.svg?branch=master)](https://travis-ci.org/gemnasium/toolbelt)\r\n\r\nGemnasium toolbelt is a CLI for the Gemnasium API.\r\n\r\n## How to install it?\r\n\r\n### On Mac OS X\r\n\r\nA Homebrew formula is available for you to use. Just run\r\n\r\n    brew tap gemnasium/gemnasium\r\n\r\nAnd then\r\n\r\n    brew install gemnasium-toolbelt\r\n\r\n### Ubuntu and Debian\r\n\r\n#### Configure Gemnasium repository\r\n\r\n    sudo sh -c 'echo \"deb http://apt.gemnasium.com stable main\" > /etc/apt/sources.list.d/gemnasium.list'\r\n    \r\n#### Trust Gemnasium GPG key\r\n\r\n    sudo apt-key adv --recv-keys --keyserver keyserver.ubuntu.com E5CEAB0AC5F1CA2A\r\n    \r\n#### Update package list\r\n\r\n    sudo apt-get update\r\n    \r\n#### Install Gemnasium toolbelt\r\n\r\n    sudo apt-get install gemnasium-toolbelt\r\n\r\nThe ```gemnasium``` command will be available in ```/usr/bin/gemnasium```\r\n\r\n### From source\r\n\r\n    go build -o gemnasium\r\n\r\n(or ```gemnasium.exe``` for windows users)\r\n\r\n### Binaries\r\n\r\nBinaries are available in the [releases](https://github.com/gemnasium/toolbelt/releases) page.\r\n\r\n## How to use it?\r\n\r\n### Authentication\r\n\r\nGemnasium Toolbelt stores your Gemnasium API key into your .netrc file.\r\n\r\nTo be logged in to Gemnasium, you need to run `gemnasium auth login` and enter your Gemnasium credentials.\r\n\r\nAlternatively, you can pass directly your API token to all commands with the option `--token` or the env var ```GEMNASIUM_TOKEN```.\r\nYour API token is available in your settings page (https://gemnasium.com/settings).\r\n\r\n### Create a new project\r\n\r\nTo create a new project on Gemnasium, you need to `cd` into your project directory and run\r\n\r\n    gemnasium projects create\r\n\r\n### Configure an existing project\r\n\r\nIf your project is already on Gemnasium, you need to `cd` into your project directory and run\r\n\r\n    gemnasium configure [project_slug]\r\n\r\nYou will need your project's Slug (available in your project page settings).\r\nA sample configuration file is available here: https://github.com/gemnasium/toolbelt/blob/master/config/gemnasium.yml.example \r\n\r\n### Push dependency files\r\n\r\nFor projects not automatically synced with Github or Gitlab, you may want to push your files directly to Gemnasium.\r\nThe corresponding project will updated soon after the files have been received. To push your files\r\n\r\n    gemnasium dependency_files push -f=Gemfile,Gemfile.lock\r\n\r\n\r\n### Live Evaluation\r\n\r\nIf you want to evaluate your project without pushing files or pulling info from Gemnasium, you may use the ```eval``` command:\r\n\r\n    gemnasium eval -f=Gemfile,Gemfile.lock\r\n\r\nThe command will exit with a code 1 if the project global status is \"red\".\r\n\r\n(a Gold subscription is required for this feature)\r\n\r\n### Auto Update\r\n\r\nAuto-Update will fetch update sets from Gemnasium and run your test suite against them.\r\nThe test suite can be passed as arguments, or through the env var GEMNASIUM_TESTSUITE.\r\n\r\n Examples:\r\n\r\n    GEMNASIUM_TESTSUITE=\"bundle exec rake\" GEMNASIUM_PROJECT_SLUG=a907c0f9b8e0b89f23f0042d76ae0358 gemnasium autoupdate\r\n\r\n    cat script.sh | gemnasium autoupdate -p=your_project_slug\r\n\r\n    gemnasium autoupdate my_project_slug bundle exec rake\r\n\r\nTypically, this command is to be used with a CI server, along with nightly builds. \r\nAlthough Gemnasium will optimize as much as possible the number of combinations, the number of iterations isn't predictable, and your test suite might be running for a long time.\r\nTo avoid looping to death, the command will stop looping after 1 hour and exit.\r\nAs soon as a valid update set is found, the loop will stop, and Gemnasium is notified. A patch will be available to download a few seconds later.\r\nWe will propose soon an option to open Pull Requests directly on GitHub.\r\n\r\nCurrently, only Ruby projects are supported. Follow us to get the latest updates: https://twitter.com/gemnasiumapp\r\n\r\n(Needs a paid plan)\r\n\r\n## Configuration\r\n\r\nThe configuration can be saved in ```.gemnasium.yml``` files in the project directory.\r\nOptions set in ```.gemnasium.yml``` are overriden by env vars:\r\n\r\n\r\n * **GEMNASIUM_PROJECT_SLUG**: override -project flag and project_slug in .gemnasium.yml.\r\n * **GEMNASIUM_TESTSUITE**: will be run for each iteration over update sets. This is typically your test suite script.\r\n * **GEMNASIUM_BUNDLE_INSTALL_CMD**: [Ruby Only] during each iteration, the new bundle will be installed. Default: \"bundle install\"\r\n * **GEMNASIUM_BUNDLE_UPDATE_CMD**: [Ruby Only] during each iteration, some gems might be updated. This command will be used. Default: \"bundle update\"\r\n * **BRANCH**: Current branch can be specified with this var, if the git command fails to run (git rev-parse --abbrev-ref HEAD).\r\n * **REVISION**: Current revision can be specified with this var, if the git command fails to run (git rev-parse --abbrev-ref HEAD)\r\n * **GEMNASIUM_TOKEN**: Your API private token (available in your account settings https://gemnasium.com/settings)\r\n * **GEMNASIUM_IGNORED_PATHS**: A list of paths separated by \",\" where dependency files are ignored.\r\n * **GEMNASIUM_RAW_FORMAT**: Display API raw json output (for debug)\r\n * **NETRC_PATH**: Location of your .netrc file (default: ~/.netrc)\r\n\r\n and env vars are overriden by command line options.\r\n Ex: \r\n\r\n```\r\necho 'project_slug: tic' > .gemnasium.yml ; GEMNASIUM_PROJECT_SLUG=\"tac\" gemnasium projects show toe\r\n=> [toe project details]\r\n```\r\n\r\nTo obtain the list of env vars used and set:\r\n\r\n   gemnasium env\r\n\r\n### Need further help?\r\n\r\nA full commands documentation is available by running\r\n\r\n    gemnasium [command] --help\r\n","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}